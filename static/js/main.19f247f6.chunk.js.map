{"version":3,"sources":["components/NavBar/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","fontSize","placeholder","height","breakpoints","up","toolbar","justifyContent","background","left","flex","leftLinkActive","color","palette","common","white","right","display","rightLink","marginLeft","linkSecondary","secondary","main","NavBar","classes","className","AppBar","position","Toolbar","Link","variant","underline","href","clsx","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLC,SAAU,IAEZC,YAAY,aACVC,OAAQ,IACPT,EAAMU,YAAYC,GAAG,MAAQ,CAC5BF,OAAQ,KAGZG,QAAS,CACPC,eAAgB,gBAChBC,WAAY,WAEdC,KAAM,CACJC,KAAM,GAERC,eAAgB,CACdC,MAAOlB,EAAMmB,QAAQC,OAAOC,OAE9BC,MAAO,CACLN,KAAM,EACNO,QAAS,OACTV,eAAgB,YAElBW,UAAW,CACTjB,SAAU,GACVW,MAAOlB,EAAMmB,QAAQC,OAAOC,MAC5BI,WAAYzB,EAAMK,QAAQ,IAE5BqB,cAAe,CACbR,MAAOlB,EAAMmB,QAAQQ,UAAUC,UAIpB,SAASC,IACtB,IAAMC,EAAUhC,IAEhB,OACE,yBAAKiC,UAAWD,EAAQ7B,MACxB,kBAAC+B,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASH,UAAWD,EAAQlB,SAC1B,yBAAKmB,UAAWD,EAAQf,OACxB,kBAACoB,EAAA,EAAD,CACEC,QAAQ,KACRC,UAAU,OACVnB,MAAM,UACNa,UAAWD,EAAQxB,MACnBgC,KAAK,8BAEJ,eAEH,yBAAKP,UAAWD,EAAQR,OACtB,kBAACa,EAAA,EAAD,CACEjB,MAAM,UACNkB,QAAQ,KACRC,UAAU,OACVN,UAAWD,EAAQN,UACnBc,KAAK,sCAEJ,WAEH,kBAACH,EAAA,EAAD,CACEC,QAAQ,KACRC,UAAU,OACVN,UAAWQ,YAAKT,EAAQN,UAAWM,EAAQJ,eAC3CY,KAAK,sCAEJ,cAKT,yBAAKP,UAAWD,EAAQtB,eC3EbgC,MARf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACZ,EAAD,QCMca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.19f247f6.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Link from '@material-ui/core/Link';\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    fontSize: 24,\n  },\n  placeholder: {\n    height: 64,\n    [theme.breakpoints.up('sm')]: {\n      height: 70,\n    },\n  },\n  toolbar: {\n    justifyContent: 'space-between',\n    background: '#215bb0', // #194b93 #215bb0\n  },\n  left: {\n    flex: 1,\n  },\n  leftLinkActive: {\n    color: theme.palette.common.white,\n  },\n  right: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  rightLink: {\n    fontSize: 16,\n    color: theme.palette.common.white,\n    marginLeft: theme.spacing(3),\n  },\n  linkSecondary: {\n    color: theme.palette.secondary.main,\n  },\n}));\n\nexport default function NavBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n    <AppBar position=\"static\">\n      <Toolbar className={classes.toolbar}>\n        <div className={classes.left} />\n        <Link\n          variant=\"h6\"\n          underline=\"none\"\n          color=\"inherit\"\n          className={classes.title}\n          href=\"/premium-themes/onepirate/\"\n        >\n          {'WEATHERLINK'}\n        </Link>\n        <div className={classes.right}>\n          <Link\n            color=\"inherit\"\n            variant=\"h6\"\n            underline=\"none\"\n            className={classes.rightLink}\n            href=\"/premium-themes/onepirate/sign-in/\"\n          >\n            {'SIGN IN'}\n          </Link>\n          <Link\n            variant=\"h6\"\n            underline=\"none\"\n            className={clsx(classes.rightLink, classes.linkSecondary)}\n            href=\"/premium-themes/onepirate/sign-up/\"\n          >\n            {'SIGN UP'}\n          </Link>\n        </div>\n      </Toolbar>\n    </AppBar>\n    <div className={classes.placeholder} />\n    </div>\n  );\n}\n","import React from 'react';\nimport NavBar from \"./components/NavBar/NavBar\"\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar/>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}